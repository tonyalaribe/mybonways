package actions

import (
	"log"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/buffalo/render"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/tonyalaribe/mybonways/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Comment)
// DB Table: Plural (Comments)
// Resource: Plural (Comments)
// Path: Plural (/comments)
// View Template Folder: Plural (/templates/comments/)

// CommentsResource is the resource for the comment model
type CommentsResource struct {
	buffalo.Resource
}

// List gets all Comments. This function is mapped to the path
// GET /comments
func (v CommentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	comments := &models.Comments{}
	// You can order your list here. Just change
	err := tx.All(comments)
	// to:
	// err := tx.Order("create_at desc").All(comments)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make comments available inside the html template
	c.Set("comments", comments)
	return c.Render(200, r.HTML("comments/index.html"))
}

// Show gets the data for one Comment. This function is mapped to
// the path GET /comments/{comment_id}
func (v CommentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Comment
	comment := &models.Comment{}
	// To find the Comment the parameter comment_id is used.
	err := tx.Find(comment, c.Param("comment_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make comment available inside the html template
	c.Set("comment", comment)
	return c.Render(200, r.HTML("comments/show.html"))
}

func (v CommentsResource) GetPromoComments(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Comment
	comments := models.Comments{}
	// To find the Comment the parameter comment_id is used.
	err := tx.Where("promo_id = ?", c.Param("promo_id")).All(&comments)
	if err != nil {
		return errors.WithStack(err)
	}

	var result []interface{}
	for _, comment := range comments {
		commentGroup := make(map[string]interface{})
		user := models.User{}
		err = tx.Where("id = ?", comment.UserID).First(&user)
		if err != nil {
			log.Println("get user error: ", err)
			continue
		}
		commentGroup["comment"] = comment
		commentGroup["user"] = user
		result = append(result, commentGroup)
	}

	return c.Render(http.StatusOK, render.JSON(result))
}

// New renders the formular for creating a new comment.
// This function is mapped to the path GET /comments/new
func (v CommentsResource) New(c buffalo.Context) error {
	// Make comment available inside the html template
	c.Set("comment", &models.Comment{})
	return c.Render(200, r.HTML("comments/new.html"))
}

// Create adds a comment to the DB. This function is mapped to the
// path POST /comments
func (v CommentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Comment
	comment := &models.Comment{}
	// Bind comment to the html form elements
	err := c.Bind(comment)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(comment)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make comment available inside the html template
		c.Set("comment", comment)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("comments/new.html"))
	}

	return c.Render(http.StatusOK, render.JSON(comment))
}

// Edit renders a edit formular for a comment. This function is
// mapped to the path GET /comments/{comment_id}/edit
func (v CommentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Comment
	comment := &models.Comment{}
	err := tx.Find(comment, c.Param("comment_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make comment available inside the html template
	c.Set("comment", comment)
	return c.Render(200, r.HTML("comments/edit.html"))
}

// Update changes a comment in the DB. This function is mapped to
// the path PUT /comments/{comment_id}
func (v CommentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Comment
	comment := &models.Comment{}
	err := tx.Find(comment, c.Param("comment_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind comment to the html form elements
	err = c.Bind(comment)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(comment)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make comment available inside the html template
		c.Set("comment", comment)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("comments/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Comment was updated successfully")
	// and redirect to the comments index page
	return c.Redirect(302, "/comments/%s", comment.ID)
}

// Destroy deletes a comment from the DB. This function is mapped
// to the path DELETE /comments/{comment_id}
func (v CommentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Comment
	comment := &models.Comment{}
	// To find the Comment the parameter comment_id is used.
	err := tx.Find(comment, c.Param("comment_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(comment)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Comment was destroyed successfully")
	// Redirect to the comments index page
	return c.Redirect(302, "/comments")
}
