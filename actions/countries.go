package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/tonyalaribe/mybonways/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Country)
// DB Table: Plural (Countries)
// Resource: Plural (Countries)
// Path: Plural (/countries)
// View Template Folder: Plural (/templates/countries/)

// CountriesResource is the resource for the country model
type CountriesResource struct {
	buffalo.Resource
}

// List gets all Countries. This function is mapped to the the path
// GET /countries
func (v CountriesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	countries := &models.Countries{}
	// You can order your list here. Just change
	err := tx.All(countries)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(countries)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make countries available inside the html template
	c.Set("countries", countries)
	return c.Render(200, r.HTML("countries/index.html"))
}

// Show gets the data for one Country. This function is mapped to
// the path GET /countries/{country_id}
func (v CountriesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Country
	country := &models.Country{}
	// To find the Country the parameter country_id is used.
	err := tx.Find(country, c.Param("country_id"))
	if err != nil {
		return err
	}
	// Make country available inside the html template
	c.Set("country", country)
	return c.Render(200, r.HTML("countries/show.html"))
}

// New renders the formular for creating a new country.
// This function is mapped to the path GET /countries/new
func (v CountriesResource) New(c buffalo.Context) error {
	// Make country available inside the html template
	c.Set("country", &models.Country{})
	return c.Render(200, r.HTML("countries/new.html"))
}

// Create adds a country to the DB. This function is mapped to the
// path POST /countries
func (v CountriesResource) Create(c buffalo.Context) error {
	// Allocate an empty Country
	country := &models.Country{}
	// Bind country to the html form elements
	err := c.Bind(country)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(country)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make country available inside the html template
		c.Set("country", country)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("countries/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Country was created successfully")
	// and redirect to the countries index page
	return c.Redirect(302, "/countries/%s", country.ID)
}

// Edit renders a edit formular for a country. This function is
// mapped to the path GET /countries/{country_id}/edit
func (v CountriesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Country
	country := &models.Country{}
	err := tx.Find(country, c.Param("country_id"))
	if err != nil {
		return err
	}
	// Make country available inside the html template
	c.Set("country", country)
	return c.Render(200, r.HTML("countries/edit.html"))
}

// Update changes a country in the DB. This function is mapped to
// the path PUT /countries/{country_id}
func (v CountriesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Country
	country := &models.Country{}
	err := tx.Find(country, c.Param("country_id"))
	if err != nil {
		return err
	}
	// Bind country to the html form elements
	err = c.Bind(country)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(country)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make country available inside the html template
		c.Set("country", country)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("countries/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Country was updated successfully")
	// and redirect to the countries index page
	return c.Redirect(302, "/countries/%s", country.ID)
}

// Destroy deletes a country from the DB. This function is mapped
// to the path DELETE /countries/{country_id}
func (v CountriesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Country
	country := &models.Country{}
	// To find the Country the parameter country_id is used.
	err := tx.Find(country, c.Param("country_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(country)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Country was destroyed successfully")
	// Redirect to the countries index page
	return c.Redirect(302, "/countries")
}
