package actions

import (
	"log"

	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/tonyalaribe/mybonways/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (AllLocation)
// DB Table: Plural (AllLocations)
// Resource: Plural (AllLocations)
// Path: Plural (/all_locations)
// View Template Folder: Plural (/templates/allLocations/)

// AllLocationsResource is the resource for the AllLocation model
type AllLocationsResource struct {
	buffalo.Resource
}

// List gets all AllLocations. This function is mapped to the the path
// GET /all_locations
func (v AllLocationsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	allLocations := &models.AllLocations{}
	// You can order your list here. Just change
	err := tx.All(allLocations)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(allLocations)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make AllLocations available inside the html template
	c.Set("allLocations", allLocations)
	return c.Render(200, r.HTML("all_locations/index.html"))
}

// Show gets the data for one AllLocation. This function is mapped to
// the path GET /all_locations/{all_location_id}
func (v AllLocationsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty AllLocation
	allLocation := &models.AllLocation{}
	// To find the AllLocation the parameter all_location_id is used.
	err := tx.Find(allLocation, c.Param("all_location_id"))
	if err != nil {
		return err
	}
	// Make allLocation available inside the html template
	c.Set("allLocation", allLocation)
	return c.Render(200, r.HTML("all_locations/show.html"))
}

// New renders the formular for creating a new AllLocation.
// This function is mapped to the path GET /all_locations/new
func (v AllLocationsResource) New(c buffalo.Context) error {
	// Make allLocation available inside the html template
	c.Set("allLocation", &models.AllLocation{})
	return c.Render(200, r.HTML("all_locations/new.html"))
}

// Create adds a AllLocation to the DB. This function is mapped to the
// path POST /all_locations
func (v AllLocationsResource) Create(c buffalo.Context) error {
	log.Println("Inside create...")

	// Allocate an empty AllLocation
	allLocation := &models.AllLocation{}
	// Bind allLocation to the html form elements
	err := c.Bind(allLocation)
	if err != nil {
		log.Println("bind error: ", err)
		return err
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// locations := &models.AllLocations{}
	// check if the location exists already...
	exists, err := tx.Where("neighbourhood = ? AND city = ? AND country = ?", allLocation.Neighbourhood, allLocation.City, allLocation.Country).
		Exists(allLocation)
	if exists {
		return c.Render(409, r.JSON(allLocation))
	}
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(allLocation)
	if err != nil {
		log.Println("tx validation err: ", err)
		return err
	}
	if verrs.HasAny() {
		// Make allLocation available inside the html template
		c.Set("allLocation", allLocation)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("all_locations/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "AllLocation was created successfully")
	// and redirect to the all_locations index page
	return c.Render(201, r.JSON(allLocation))
}

// Edit renders a edit formular for a AllLocation. This function is
// mapped to the path GET /all_locations/{all_location_id}/edit
func (v AllLocationsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty AllLocation
	allLocation := &models.AllLocation{}
	err := tx.Find(allLocation, c.Param("all_location_id"))
	if err != nil {
		return err
	}
	// Make allLocation available inside the html template
	c.Set("allLocation", allLocation)
	return c.Render(200, r.HTML("all_locations/edit.html"))
}

// Update changes a AllLocation in the DB. This function is mapped to
// the path PUT /all_locations/{all_location_id}
func (v AllLocationsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty AllLocation
	allLocation := &models.AllLocation{}
	err := tx.Find(allLocation, c.Param("all_location_id"))
	if err != nil {
		return err
	}
	// Bind AllLocation to the html form elements
	err = c.Bind(allLocation)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(allLocation)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make allLocation available inside the html template
		c.Set("allLocation", allLocation)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("all_locations/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "AllLocation was updated successfully")
	// and redirect to the all_locations index page
	return c.Redirect(302, "/all_locations/%s", allLocation.ID)
}

// Destroy deletes a AllLocation from the DB. This function is mapped
// to the path DELETE /all_locations/{all_location_id}
func (v AllLocationsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty AllLocation
	allLocation := &models.AllLocation{}
	// To find the AllLocation the parameter all_location_id is used.
	err := tx.Find(allLocation, c.Param("all_location_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(allLocation)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "AllLocation was destroyed successfully")
	// Redirect to the all_locations index page
	return c.Redirect(302, "/all_locations")
}
