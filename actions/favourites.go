package actions

import (
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/buffalo/render"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/tonyalaribe/mybonways/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Favourite)
// DB Table: Plural (Favourites)
// Resource: Plural (Favourites)
// Path: Plural (/favourites)
// View Template Folder: Plural (/templates/favourites/)

// FavouritesResource is the resource for the favourite model
type FavouritesResource struct {
	buffalo.Resource
}

// List gets all Favourites. This function is mapped to the path
// GET /favourites
func (v FavouritesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	favourites := &models.Favourites{}
	// You can order your list here. Just change
	err := tx.All(favourites)
	// to:
	// err := tx.Order("create_at desc").All(favourites)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make favourites available inside the html template
	c.Set("favourites", favourites)
	return c.Render(200, r.HTML("favourites/index.html"))
}

// Show gets the data for one Favourite. This function is mapped to
// the path GET /favourites/{favourite_id}
func (v FavouritesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	// To find the Favourite the parameter favourite_id is used.
	err := tx.Find(favourite, c.Param("favourite_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make favourite available inside the html template
	c.Set("favourite", favourite)
	return c.Render(200, r.HTML("favourites/show.html"))
}

// New renders the formular for creating a new favourite.
// This function is mapped to the path GET /favourites/new
func (v FavouritesResource) New(c buffalo.Context) error {
	// Make favourite available inside the html template
	c.Set("favourite", &models.Favourite{})
	return c.Render(200, r.HTML("favourites/new.html"))
}

// Create adds a favourite to the DB. This function is mapped to the
// path POST /favourites
func (v FavouritesResource) Create(c buffalo.Context) error {
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	// Bind favourite to the html form elements
	err := c.Bind(favourite)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(favourite)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make favourite available inside the html template
		c.Set("favourite", favourite)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("favourites/new.html"))
	}

	return c.Render(http.StatusOK, render.JSON(favourite))
}

// Edit renders a edit formular for a favourite. This function is
// mapped to the path GET /favourites/{favourite_id}/edit
func (v FavouritesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	err := tx.Find(favourite, c.Param("favourite_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make favourite available inside the html template
	c.Set("favourite", favourite)
	return c.Render(200, r.HTML("favourites/edit.html"))
}

// Update changes a favourite in the DB. This function is mapped to
// the path PUT /favourites/{favourite_id}
func (v FavouritesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	err := tx.Find(favourite, c.Param("favourite_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind favourite to the html form elements
	err = c.Bind(favourite)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(favourite)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make favourite available inside the html template
		c.Set("favourite", favourite)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("favourites/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Favourite was updated successfully")
	// and redirect to the favourites index page
	return c.Redirect(302, "/favourites/%s", favourite.ID)
}

// Destroy deletes a favourite from the DB. This function is mapped
// to the path DELETE /favourites/{favourite_id}
func (v FavouritesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	// To find the Favourite the parameter favourite_id is used.
	err := tx.Find(favourite, c.Param("favourite_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(favourite)
	if err != nil {
		return errors.WithStack(err)
	}

	return c.Render(http.StatusOK, render.JSON(favourite))
}

func (v FavouritesResource) IsFavourite(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Favourite
	favourite := &models.Favourite{}
	promoID := c.Param("promo_id")
	user := c.Value("user").(map[string]interface{})
	// To find the Favourite the parameter favourite_id is used.
	err := tx.Where("promo_id = ? AND user_id = ?", promoID, user["id"]).First(favourite)
	if err != nil {
		return c.Render(422, render.JSON(favourite))
	}

	return c.Render(200, render.JSON(favourite))
}
